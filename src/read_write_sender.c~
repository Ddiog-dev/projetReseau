#include <sys/select.h>
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <stddef.h> /* size_t */
#include <stdint.h> /* uintx_t */
#include <signal.h>
#include <time.h>
#include "packet_interface.h"

#define PKT_MAX_PAYLOAD 512


int window = 31; // Window size

unsigned long timeout = 4; /* Timeout value in seconds */

// TODO selective repeat
// TODO timers
// TODO gérer ACK/NACK

/* Variables utilisées pour le sending buffer */
pkt_t_node * buffer_head = NULL;
pkt_t_node * buffer_tail = NULL;

int buffer_items = 0;


void sighandler(int signo){
	if(signo == SIGALRM){
		// handle signal

	} else {
		fprintf(stderr, "Unexpected signal received\n");
	}
}

// TODO
/* Handler for timeout */
void sig_handler(int signo){
	if(signo == SIGALRM){
		// TODO

	} else {
		fprintf(stderr, "Unexpected signal\n");
	}
}

void read_write_sender(const int sfd, const int fd){

	int window_flag = 1; // Sets to 0 when window runs out of free slots
	fd_set read_fd;
	int eof = 0;
	int err;
	ssize_t size;
	char* message = (char*) malloc(sizeof(char)*PKT_MAX_PAYLOAD);
	uint8_t seqnum = 0;
	FD_ZERO(&read_fd);
	while(!eof){
		fflush(stdout);
		FD_ZERO(&read_fd);
		FD_SET(sfd, &read_fd);
		if(window_flag){
			FD_SET(fd, &read_fd);
		}

		int i = select(fd+1, &read_fd, NULL, NULL, NULL);
		
		if(i >= 0){ // TODO Handle ACKs/ NACKs
			
			/*
			*
			*	RECEIVING PACKETS
			*	
			*/

			if(FD_ISSET(sfd, &read_fd)){ 
				err = read(sfd, (void*) message, PKT_MAX_PAYLOAD);
				if(err == -1){
					perror("read 1");
					break;
				}
				size = (ssize_t)err;
				pkt_t * pkt = pkt_new();
				if(pkt == NULL) {
					perror("malloc");
					break;
				}

				size = (ssize_t) err;

				pkt_status_code status = pkt_decode(message, size, pkt);

				if(status != PKT_OK){
					fprintf(stderr, "Error in decode() - status code %d\n", status);
				}
				
				if(pkt_get_type(pkt) == PTYPE_NACK){
					uint8_t new_window = pkt_get_window(pkt);
					window = new_window;
					pkt_del(pkt);
				} else {

					if(pkt_get_type(pkt) == PTYPE_ACK){
						uint8_t rseq = pkt_get_seqnum(pkt);
						while(buffer_head != 0x0 && peek_seqnum(&buffer_head) < rseq){
							if((unsigned int) ((clock() - buffer_head->stime) / CLOCKS_PER_SEC) >(unsigned int) timeout){

							}
							pkt_t * p = pop_s(&buffer_head, &buffer_tail);
							buffer_items --;
							window_flag = 1;
							pkt_del(p);
						}
						pkt_del(pkt);
					} else {
						if(pkt_get_type(pkt) == PTYPE_DATA){
							fprintf(stderr, "Unexpected packet type (PTYPE_DATA)\n");
						}
					}
				}
			}

			/*
			*
			*	SENDING PACKETS
			*
			*/

				
	

			if(FD_ISSET(fd, &read_fd)){
				err = read(fd, (void*)message, PKT_MAX_PAYLOAD);
				if(err == 0){
					eof = 1;
				} else {
					if(err == -1){
						perror("read 2");
						break;
					}
					
					pkt_t* p = pkt_new();
					if(p == NULL){
						perror("malloc");
						break;
					}

					// TODO check return values
					size = (size_t)err;


					if(pkt_set_type(p, PTYPE_DATA) != PKT_OK){
						fprintf(stderr, "error in pkt_set_type()\n");
					}
					if(pkt_set_window(p, 0) != PKT_OK){
						fprintf(stderr, "error in pkt_set_window\n");
					}
					if(pkt_set_length(p, (uint16_t)size) != PKT_OK){
						fprintf(stderr, "error in pkt_set_length()\n");
					}
					if(pkt_set_payload(p, message, (uint16_t)size)!= PKT_OK){
						fprintf(stderr, "error in pkt_set_payload()\n");
					}
					if(pkt_set_seqnum(p, seqnum) != PKT_OK){
						fprintf(stderr, "error in pkt_set_seqnum()\n");
					}
					
					size = 520;
					
					pkt_status_code status = pkt_encode(p, message, (size_t*)&size);
					
					if(status != PKT_OK){
						fprintf(stderr, "Encoding failed (status code %d)\n", status);
						break;
					}

					err = write(sfd, (void*) message, size);
					if(err == -1){
						perror("write");
						break;
					}
					int perr = push(&buffer_head, &buffer_tail, p);
					if(perr == -1){
						fprintf(stderr, "Error buffering packet\n");
						break;
					}
					buffer_items ++;

					// Last buffer slot is used, setting appropriate flag
					if(buffer_items == 31){
						window_flag = 0;
					}
				}
				seqnum++;
			}
		}
	}
	// Send EOF
	fprintf(stderr, "Sending EOF...\n");
	char * dull = "";
	pkt_t * eofpkt = pkt_new();
	pkt_set_type(eofpkt, PTYPE_DATA);
	pkt_set_seqnum(eofpkt, seqnum);
	pkt_set_payload(eofpkt, dull, 0);
	pkt_status_code encode_error = pkt_encode(eofpkt, message, (size_t*) &size);
	if(encode_error != PKT_OK){
		fprintf(stderr, "Error encoding EOF packet\n");
	}
	err = write(sfd, (void*) message, size);
	if(err == -1){
		fprintf(stderr, "Error sending EOF packet on socket");
	}
 	
	// TODO attendre l'ack

	pkt_del(eofpkt);
	free(message);
}
