#define _DEFAULT_SOURCE

#include "packet_interface.h"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <zlib.h>
#include <time.h>


/*
	*
	Include notification : header for macOS only - else, replace with
	#include <endian.h>
	*
*/
#include "fink_endiandev_pkg_endian.h"	
//#include <endian.h>




/* Extra #includes */
/* Your code will be inserted here */

struct __attribute__((__packed__)) pkt {
  	ptypes_t type : 3;
  	uint8_t window : 5;
	uint8_t seq;
  	uint16_t length;;
	uint32_t crc;
	char* payload;
};

struct __attribute__((__packed__)) fen {
  	ptypes_t type : 3;
  	uint8_t window : 5;
};
  

pkt_t* pkt_new(){
	pkt_t* pkt = (pkt_t*) malloc(sizeof(pkt_t));
	return pkt;
}


void pkt_del(pkt_t *pkt){
  free(pkt->payload);
  free(pkt);
}



pkt_status_code pkt_decode(const char *data, const size_t len, pkt_t *pkt){
	
	if(len == 4) {
		return E_NOPAYLOAD;
	}
	
	if(len < 4) {
		return E_NOHEADER;
	}

	
	
	size_t payload_size;


	memcpy(&pkt->seq, data+1, 1);
	memcpy(&pkt->length, data+2, 2);
	pkt->length =  be16toh(pkt->length);
	if(pkt->length % 4 != 0){
		payload_size = pkt->length + 4-(pkt->length % 4);
	} else {
		payload_size = pkt->length;	
	}
	
	if(pkt->length > MAX_PAYLOAD_SIZE) { 
		return E_LENGTH; 
	}


	char* payload = (char*) malloc(sizeof(char)*payload_size);
	
	memcpy(payload, data+4, payload_size);

	pkt_set_payload(pkt, payload, pkt->length);
	free(payload);

	unsigned char tmp;
	memcpy(&tmp, data, 1);

	pkt->type = tmp >> 5;
	
	if(pkt->type != PTYPE_ACK && pkt->type != PTYPE_NACK && pkt->type != PTYPE_DATA) {
		
		return E_TYPE; 
	}

	pkt->window = tmp;
	
	if(pkt->window > MAX_WINDOW_SIZE) return E_WINDOW;
	
	uint32_t crc1 = crc32(0L, (const unsigned char*) data, len-4);
	uint32_t crc2;
	memcpy(&crc2, &data[payload_size + 4], sizeof(uint32_t));
	crc2 = be32toh(crc2);
	
	if(crc1 != crc2){
		return E_CRC;
	}

	return PKT_OK;
}


/*
 * Convert a struct pkt into a set of bytes ready to be sent over the wires,
 * (thus in network byte-order)
 * including the CRC32 of the header & payload of the packet
 *
 * @pkt: The struct that contains the info about the packet to send
 * @buf: A buffer to store the resulting set of bytes
 * @len: The number of bytes that can be written in buf.
 * @len-POST: The number of bytes written in the buffer by the function.
 * @return: A status code indicating the success or E_NOMEM if the buffer is
 * 		too small
 * */
pkt_status_code pkt_encode(const pkt_t* pkt, char *buf, size_t *len){
	
	// 1. check size
	size_t header_size = 4;
	size_t crc_size = 4;
	size_t payload_size;


	if(pkt->length % 4 != 0){
		payload_size = pkt->length + 4-(pkt->length % 4);
	} else {
		payload_size = pkt->length;	
	}
	if(pkt->type != PTYPE_DATA){
		payload_size = 0;
	}
	if(pkt->length > MAX_PAYLOAD_SIZE ||
	   header_size + crc_size + payload_size > (*len)) {
		return E_LENGTH;
	}


	// 2. group type and window in one char, and cat it
	
	unsigned char b;

	b = pkt->type << 5;
	b += pkt -> window;
   	       
	*buf = b;


	
	// 3. cat seq
	uint8_t seq = pkt->seq;
	b = seq;

	*(buf+1) = b;



	// 4. cat length (2 bytes)

	uint16_t length;
	  
	if(pkt->type == PTYPE_DATA) {
	length = pkt->length;
	}
	else {
	  length = 0;
	}
	length = htobe16(length);
	memcpy(buf+2, &length, (size_t) 2);
	


	// 5. payload

	if(pkt->type == PTYPE_DATA){ 
		memcpy(buf+4, pkt->payload, payload_size);
	}
	

	// 6. CRC

	uLong crc = crc32(0L, (unsigned char*) buf, (size_t) payload_size + header_size);
        char *a = (char*) malloc(sizeof(char) *4);
	crc = htobe32(crc);
	memcpy(a, &crc, 4);

	memcpy(buf + payload_size + header_size, a, (size_t) 4);

	free(a);

	*len = payload_size + header_size + 4;
	
  	return PKT_OK;
}

ptypes_t pkt_get_type  (const pkt_t* pkt){
	return pkt->type;
}

uint8_t  pkt_get_window(const pkt_t* pkt){
	return pkt->window;
}

uint8_t  pkt_get_seqnum(const pkt_t* pkt){
	return pkt->seq;
}

uint16_t pkt_get_length(const pkt_t* pkt){
	return pkt->length;
}

uint32_t pkt_get_crc(const pkt_t* pkt){
	return pkt->crc;
}

const char* pkt_get_payload(const pkt_t* pkt){
	
	return pkt->payload;
}


pkt_status_code pkt_set_type(pkt_t *pkt, const ptypes_t type){
	pkt->type = type;
	return PKT_OK;
}

pkt_status_code pkt_set_window(pkt_t *pkt, const uint8_t window){
	pkt->window = window;
	return PKT_OK;
}

pkt_status_code pkt_set_seqnum(pkt_t *pkt, const uint8_t seqnum){
	pkt->seq = seqnum;
	return PKT_OK;
}

pkt_status_code pkt_set_length(pkt_t *pkt, const uint16_t length){
	pkt->length = length;
	return PKT_OK;
}

pkt_status_code pkt_set_crc(pkt_t *pkt, const uint32_t crc){
	pkt->crc = crc;
	return PKT_OK;
}

pkt_status_code pkt_set_payload(pkt_t *pkt, const char *data, const uint16_t length){


  size_t multiple = 0; 
  if(length % 4 !=0) {
      multiple = 4 - (length % 4);
  }

  pkt -> payload  = (char*) malloc(sizeof(char) * length + multiple);

  strncpy(pkt -> payload, data, length + multiple);
  
  pkt_set_length(pkt, length);
  
  return PKT_OK;	
}

int push(pkt_t_node **list_tail, pkt_t_node **list_head, pkt_t *pkt) {

   pkt_t_node *new = (pkt_t_node *) malloc(sizeof(pkt_t_node));
   
   new->pkt = pkt;
   new->next = NULL;
   new->stime = clock();
  if(new == NULL)  {
	  perror("malloc");
	  return -1;
	}
	

  //si la liste est vide, pointeur vers le premier élément
  if(*list_tail == NULL) {
     *list_tail = new;
     *list_head = new;
     
     return 0;
   }

  (*list_tail)->next = new;

  (*list_tail) = (*list_tail)->next;
  
	(*list_tail)-> next = NULL;

  return 0;
  
}


pkt_t *pop(pkt_t_node **list_head, pkt_t_node **list_tail, uint8_t seq_waited) {


  if(*list_head == NULL) return NULL;

   pkt_t_node *prev = *list_head;
   pkt_t_node *actual = *list_head;
   
   pkt_t *pkt;


  if((actual -> pkt) -> seq == seq_waited) { 
	
    *list_head = (*list_head) -> next;
 
	if(*list_head == NULL) *list_tail = NULL; 
  } else {
    while((actual -> pkt) -> seq != seq_waited ) {
		
      prev = actual;
      actual = actual-> next;

		if(actual -> pkt == NULL) {
			return NULL;
		}
    }

    prev->next = actual -> next;
  }

  actual -> next = NULL;
  


  pkt = actual->pkt;

  free(actual);

  return pkt;  
   
}

pkt_t *pop_s(pkt_t_node **list_head, pkt_t_node **list_tail){

	if(*list_head == NULL){
		fprintf(stderr, "Buffer empty\n");
		return NULL;
	}

	pkt_t_node * toPop = *list_head;
	pkt_t * pkt = toPop -> pkt;
	pkt_t_node * toFree = *list_head;
	*list_head = (*list_head)->next;
	if(*list_head == NULL) {
		*list_tail = NULL;
	}
	free(toFree);
	return pkt;
}


uint8_t peek_seqnum(pkt_t_node ** list_tail){
	if(list_tail == NULL){
		fprintf(stderr, "Buffer contains irregular data\n");
		return 0;
	}
		return pkt_get_seqnum((*list_tail) -> pkt);
}


clock_t peek_stime(pkt_t_node ** list_tail){
	if(list_tail == NULL){
		fprintf(stderr, "Buffer contains irregular data\n");
		return (clock_t)0;
	}
		return (*list_tail)->stime;
}


